#include <stdio.h>
#include <string.h>
struct Instruction {
    char lhs[10], op[3], arg1[10], arg2[10];
} code[30], optimized[30];
int main() {
    int n, i, j, k, found;
    printf("Enter number of instructions: ");
    scanf("%d", &n);
    printf("Enter the instructions in three address code form:\n");
    printf("(Format: result operand1 operator operand2)\n");
    for (i = 0; i < n; i++) {
        scanf("%s %s %s %s", code[i].lhs, code[i].arg1, code[i].op, code[i].arg2);
    }
    k = 0;
    for (i = 0; i < n; i++) {
        found = 0;
        for (j = 0; j < k; j++) {
            if (strcmp(code[i].op, optimized[j].op) == 0 &&
                strcmp(code[i].arg1, optimized[j].arg1) == 0 &&
                strcmp(code[i].arg2, optimized[j].arg2) == 0) {
                printf("Eliminating common subexpression in: %s = %s %s %s\n",
                       code[i].lhs, code[i].arg1, code[i].op, code[i].arg2);
                strcpy(optimized[k].lhs, code[i].lhs);
                strcpy(optimized[k].arg1, optimized[j].lhs);
                strcpy(optimized[k].op, "=");
                strcpy(optimized[k].arg2, "");
                k++;
                found = 1;
                break;
            }
        }
        if (!found) {
            optimized[k++] = code[i];
        }
    }
    printf("\nOptimized Code:\n");
    for (i = 0; i < k; i++) {
        if (strcmp(optimized[i].op, "=") == 0)
            printf("%s = %s\n", optimized[i].lhs, optimized[i].arg1);
        else
            printf("%s = %s %s %s\n", optimized[i].lhs,
                   optimized[i].arg1, optimized[i].op, optimized[i].arg2);
    }
    return 0;
}
